<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
  <title>
    <%= title %>
  </title>
  <link rel="icon" href="/images/favicon.ico" type="image/x-icon" />

  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="bg-green-50 text-gray-800 flex flex-col min-h-screen">
  <!-- Fixed Header -->
  <%- include('partials/header') %>

    <!-- Main Content -->
    <main class="flex-1 mt-10 pt-16 pb-16 overflow-y-auto px-4 md:px-8 max-w-screen-lg mx-auto">
      <h2 class="text-2xl font-bold mb-4 px-2">Identify Birds & Plants</h2>
      <p class="text-lg mb-6 px-2">Upload a photo to identify species in seconds!</p>
      <div class="bg-white rounded-lg shadow p-4 mb-6 mx-2">
        <svg class="w-16 h-16 mx-auto mb-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z">
          </path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z">
          </path>
        </svg>
        <input type="file" id="imageInput" accept="image/*"
          class="mb-4 block w-full text-sm text-gray-500 file:mr-2 file:py-2 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" />
        <img id="imagePreview" class="hidden w-full max-w-xs mx-auto mb-4 rounded-lg shadow" />
        <button onclick="identifySpecies()"
          class="w-full bg-green-600 text-white py-3 px-4 rounded-lg hover:bg-green-700 transition">
          Identify
        </button>
      </div>
      <div id="identificationResult" class="text-center text-gray-600 px-2">
        Results will appear here after identification.
      </div>
      <div id="submitIdentificationContainer"
        class="text-gray-600 mt-6 bg-white rounded-lg shadow p-4 mb-6 mx-2 text-center hidden">
        <p><strong>Would you like to submit your sighting?</strong></p>
        <div class="flex gap-4">
          <button id="yesButton"
            class="flex-1 bg-green-600 mt-4 text-white py-3 px-4 rounded-lg hover:bg-green-700 transition"
            onclick="submissionModal.showModal()">
            Yes
          </button>
          <button id="noButton"
            class="flex-1 bg-red-600 mt-4 text-white py-3 px-4 rounded-lg hover:bg-red-700 transition"
            onclick="resetPage()">
            No
          </button>
        </div>
        <p class="mt-3 w-full md:w-[75%] mx-auto">Submissions will be added to your Collections page and will contribute
          to the
          Explore page.</p>
      </div>
      <div role="alert" id="submissionSuccessAlert" class="hidden fixed top-0 left-1/2 transform -translate-x-1/2 -translate-y-full
      transition-transform duration-700 z-[9000] w-full max-w-md shadow-lg ease-in-out">
        <div class="bg-green-500 text-white font-bold rounded-t px-4 py-2 relative">
          Submission successful!
        </div>
        <div class="border border-t-0 border-green-400 rounded-b bg-green-100 px-4 py-3 text-green-700">
          <p>The sighting can now be found on the Explore page and in your Collection!</p>
        </div>
      </div>
      <dialog id="submissionModal" class="w-full max-w-full md:max-w-lg border rounded-2xl modal">
        <div class="modal-box p-4 border rounded-2xl w-full">
          <form method="dialog">
            <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">âœ•</button>
          </form>
          <h3 class="text-2xl md:text-3xl font-bold mt-4 mb-5 mx-auto text-center underline">Sighting Information</h3>
          <div id="descriptionDiv" class="gap-y-4">
            <form id="submissionInputsForm" class="space-y-4 md:space-y-6">
              <div class="text-center mx-auto">
                <h3 class="text-center mx-auto text-xl md:text-2xl font-bold mb-3">Description</h3>
                <textarea name="description" id="description" maxlength="150"
                  placeholder="Please describe your sighting (e.g. location, observations, etc.)"
                  class="border border-green-600 rounded w-full p-2"></textarea>
              </div>
              <hr class="solid">
              <div class="text-center mx-auto">
                <h3 class="text-xl md:text-2xl font-bold mb-3">Time & Date<span class="text-red-500">*</span></h3>
                <input name="sightingTime" id="sightingTime" type="datetime-local" required class="w-full max-w-xs">
              </div>
              <hr class="solid">
              <div>
                <h3 class="text-center mx-auto text-xl md:text-2xl font-bold">Location<span
                    class="text-red-500">*</span></h3>
                <div class="text-center mx-auto">
                  <p id="useCurrentLocation"
                    class="py-3 md:py-4 font-semibold text-base md:text-lg text-green-600 hover:underline cursor-pointer">
                    Use your current location</p>
                </div>
                <div class="flex flex-col md:flex-row md:space-x-5 space-y-2 md:space-y-0 justify-center items-center">
                  <div id="latitude">
                    <label class="py-2 md:py-4 font-semibold">Latitude:</label>
                    <input name="sightingLatitude" id="sightingLatitude" type="number"
                      class="border border-green-600 rounded px-2 w-full" placeholder="e.g. 49.2587" required>
                  </div>
                  <div id="longitude">
                    <label class="py-2 md:py-4 font-semibold">Longitude:</label>
                    <input name="sightingLongitude" id="sightingLongitude" type="number"
                      class="border border-green-600 rounded px-2 w-full" placeholder="e.g. -123.1211" required>
                  </div>
                </div>
                <h3 class="text-center mx-auto underline text-lg md:text-xl font-semibold my-3 md:my-4">OR</h3>
                <div class="mb-3">
                  <div class="text-center mx-auto font-semibold">
                    <p class="text-base md:text-lg">Click on the map to choose a sighting location</p>
                  </div>
                  <div id="map" class="mx-auto mt-3 md:mt-4" style="height: 250px; width: 100%;"></div>
                </div>
                <hr class="solid">
                <div class="relative flex justify-center mt-4">
                  <button id="submissionButton"
                    class="text-lg md:text-xl w-1/2 text-center font-semibold bg-gradient-to-r from-blue-500 to-green-500 text-white py-2 md:py-3 px-4 md:px-6 rounded-full shadow-lg hover:scale-105 transform transition duration-300 ease-in-out z-10">
                    Submit
                  </button>
                  <button type="reset"
                    class="absolute left-1/2 translate-x-[190%] ml-4 mt-1 text-lg md:text-xl font-semibold bg-gray-300 text-black py-2 md:py-3 px-4 md:px-6 rounded-full shadow hover:bg-gray-400 transition duration-300 ease-in-out">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="#000000" width="20px" height="20px"
                      viewBox="0 0 1920 1920">
                      <path
                        d="M960 0v213.333c411.627 0 746.667 334.934 746.667 746.667S1371.627 1706.667 960 1706.667 213.333 1371.733 213.333 960c0-197.013 78.4-382.507 213.334-520.747v254.08H640V106.667H53.333V320h191.04C88.64 494.08 0 720.96 0 960c0 529.28 430.613 960 960 960s960-430.72 960-960S1489.387 0 960 0"
                        fill-rule="evenodd" />
                    </svg>
                  </button>
                </div>
              </div>

            </form>
          </div>
        </div>
      </dialog>
      <!-- </div> -->
    </main>

    <!-- Bottom Navigation -->
    <%- include('partials/footer') %>

      <script>
        let sightingData;
        async function resetPage() {
          try {
            // Delete the image from Cloudinary if it exists
            if (sightingData && sightingData.photoUrl) {
              await fetch("/delete-image", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({ imageUrl: sightingData.photoUrl })
              });
            }
          } catch (error) {
            console.error("Error deleting image:", error);
            // Continue with reset even if deletion fails
          }

          // Hide the submission container
          document.getElementById("submitIdentificationContainer").classList.add("hidden");

          // Clear the identification results
          document.getElementById("identificationResult").innerHTML =
            "Results will appear here after identification.";

          // Clear the image preview and input
          document.getElementById("imagePreview").classList.add("hidden");
          document.getElementById("imageInput").value = "";

          // Reset any stored sighting data
          sightingData = null;

          // Scroll back to the top of the form
          document.querySelector("main").scrollIntoView({ behavior: "smooth" });
        }
        async function identifySpecies() {
          const file = document.getElementById("imageInput").files[0];
          const resultDiv = document.getElementById("identificationResult");
          const submissionDiv = document.getElementById("submitIdentificationContainer");
          const imagePreview = document.getElementById("imagePreview");

          if (!file) {
            resultDiv.innerHTML = `
              <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                Please select an image to identify.
              </div>
            `;
            return;
          }

          // Show loading spinner and image preview
          resultDiv.innerHTML = `
            <div class="flex flex-col items-center">
              <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-green-600 mb-4"></div>
              <p>Analyzing your image...</p>
            </div>
          `;

          try {
            // Step 1: Upload image to Cloudinary
            const formData = new FormData();
            formData.append("image", file);
            const uploadResponse = await fetch("/upload", {
              method: "POST",
              body: formData,
            });
            if (!uploadResponse.ok) {
              const errorData = await uploadResponse.json();
              throw new Error(errorData.error || "Failed to upload image");
            }
            const { imageUrl } = await uploadResponse.json();

            // Show the uploaded image
            imagePreview.src = imageUrl;
            imagePreview.classList.remove("hidden");

            // Step 2: Identify species with our enhanced endpoint
            const identifyResponse = await fetch("/identify", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ imageUrl }),
            });
            if (!identifyResponse.ok) {
              const errorData = await identifyResponse.json();
              throw new Error(errorData.error || "Failed to identify species");
            }
            const identification = await identifyResponse.json();

            if (identification.type === "unknown") {
              resultDiv.innerHTML = `
                <div class="bg-white rounded-lg shadow p-4 text-left">
                  <h3 class="text-xl font-semibold mb-2">Identification Result</h3>
                  <p class="mb-2">Could not confidently identify this as a bird or plant.</p>
                  ${identification.visionLabels?.length ? `
                    <div class="mt-3">
                      <h4 class="font-medium">Detected features:</h4>
                      <ul class="list-disc pl-5 mt-1">
                        ${identification.visionLabels.map(label => `
                          <li>${label.description} (${(label.score * 100).toFixed(0)}% confidence)</li>
                        `).join('')}
                      </ul>
                    </div>
                  ` : ''}
                </div>
              `;
              return;
            }

            // Step 3: Fetch details based on type
            const detailsEndpoint = identification.type === "bird" ? "/bird-details" : "/plant-details";
            const detailsResponse = await fetch(detailsEndpoint, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(identification),
            });

            if (!detailsResponse.ok) {
              throw new Error(`Failed to fetch ${identification.type} details`);
            }
            const detailsData = await detailsResponse.json();

            // Display enhanced results
            resultDiv.innerHTML = `
              <div class="bg-white rounded-lg shadow p-4 text-left">
                <div class="flex flex-col items-center mb-4">
                  <img src="${imageUrl}" alt="${identification.commonName}" class="w-full h-auto max-h-64 object-contain rounded-lg mb-3">
                  <div class="text-center">
                    <h3 class="text-xl font-semibold">${identification.commonName || "Unknown"}</h3>
                    <p class="text-gray-600 italic">${identification.scientificName || "Unknown"}</p>
                    <div class="flex justify-center items-center mt-1">
                      <span class="inline-block px-2 py-1 text-xs font-semibold rounded 
                        ${identification.confidence > 0.8 ? 'bg-green-100 text-green-800' :
                identification.confidence > 0.5 ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}">
                        ${(identification.confidence * 100).toFixed(0)}% Confidence
                      </span>
                    </div>
                  </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 class="font-medium text-green-700">Taxonomy</h4>
                    <ul class="mt-2 space-y-1">
                      <li><strong>Type:</strong> ${identification.type.charAt(0).toUpperCase() + identification.type.slice(1)}</li>
                      <li><strong>Family:</strong> ${detailsData.family || "Unknown"}</li>
                      ${identification.type === "bird" ? `
                        <li><strong>Habitat:</strong> ${detailsData.habitat || "Unknown"}</li>
                        <li><strong>Conservation Status:</strong> ${detailsData.conservationStatus || "Unknown"}</li>
                      ` : `
                        <li><strong>Native Region:</strong> ${detailsData.nativeRegion || "Unknown"}</li>
                        <li><strong>Uses:</strong> ${detailsData.uses || "Unknown"}</li>
                      `}
                    </ul>
                  </div>

                  <div>
                    <h4 class="font-medium text-green-700">Description</h4>
                    <p class="mt-2">${detailsData.description || "No description available"}</p>
                    
                    ${detailsData.interestingFacts?.length ? `
                      <h4 class="font-medium text-green-700 mt-3">Interesting Facts</h4>
                      <ul class="list-disc pl-5 mt-1 space-y-1">
                        ${detailsData.interestingFacts.map(fact => `<li>${fact}</li>`).join('')}
                      </ul>
                    ` : ''}
                  </div>
                </div>
              </div>
            `;

            // Show submission container or ask the user to login depending on login status
            const checkLoginResponse = await fetch("/check-login");
            if (checkLoginResponse.ok) {
              submissionDiv.classList.remove("hidden");
            } else {
              submissionDiv.innerHTML = "<p class='mb-4'>Please login to submit your sighting. Submitted sightings will appear in your Collections page and on the Explore page.</p><a href='/login'class='bg-gradient-to-r from-blue-500 to-green-500 text-white px-4 py-2 rounded-full shadow-lg hover:scale-105 transform transition duration-300 ease-in-out font-medium'>Login</a>";
              submissionDiv.classList.remove("hidden");
            }



            // Store sighting data for potential submission
            sightingData = {
              species: identification.commonName,
              scientificName: identification.scientificName,
              description: detailsData.description || "",
              coordinates: [-123.1207, 49.2827], // Default coordinates (Vancouver)
              photoUrl: imageUrl,
              timestamp: new Date(),
              taxonomicGroup: identification.type,
              family: detailsData.family,
              ...(identification.type === "bird" ? { habitat: detailsData.habitat } : {})
            };
            // scroll down to have the identification results and submission in view
            submissionDiv.scrollIntoView({ behavior: "smooth", block: "center" });
            const statsResponse = await fetch("/update-stats", {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                type: sightingData.taxonomicGroup,
                action: "identify"
              })
            });

            if (!statsResponse.ok) {
              console.error("Failed to update stats");
            }
          } catch (error) {
            console.error("Error:", error);
            resultDiv.innerHTML = `
              <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                <strong>Error:</strong> ${error.message}
              </div>
            `;
            submissionDiv.classList.add("hidden");
          }
        }

        // Image preview
        document.getElementById("imageInput").addEventListener("change", () => {
          const file = document.getElementById("imageInput").files[0];
          const imagePreview = document.getElementById("imagePreview");
          if (file) {
            imagePreview.src = URL.createObjectURL(file);
            imagePreview.classList.remove("hidden");
          } else {
            imagePreview.classList.add("hidden");
          }
        });


        // handle displaying the successful submission alert
        function displaySubmissionAlert() {
          let submissionAlert = document.getElementById("submissionSuccessAlert")
          submissionAlert.classList.remove("hidden");
          submissionAlert.classList.add("translate-y-10");
          setTimeout(() => {
            submissionAlert.classList.remove("translate-y-10");
            submissionAlert.classList.add("-translate-y-full");
            setTimeout(() => {
              submissionAlert.classList.add("hidden")
            }, 5000)
          }, 5000)
        }

        // Adds the identification to sightings collection in the database
        async function submitSighting() {
          const button = document.getElementById("submissionButton");
          // Get values from the submission modal input fields
          const sightingLatitude = document.getElementById("sightingLatitude").value;
          const sightingLongitude = document.getElementById("sightingLongitude").value;
          const lngLat = [sightingLongitude, sightingLatitude];
          const sightingTime = document.getElementById("sightingTime").value;
          const sightingUserDescription = document.getElementById("description").value;

          const submissionInformation = {
            coordinates: lngLat,
            userDescription: sightingUserDescription,
            timestamp: sightingTime
          }
          // merge submission information into the sightingData array and flatten
          sightingData = {
            ...sightingData,
            ...submissionInformation
          }

          button.disabled = true;
          button.innerHTML = `
            <span class="flex items-center">
              <span class="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white mr-2"></span>
              Submitting...
            </span>
          `;

          try {
            const response = await fetch("/submitSighting", {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify(sightingData)
            });

            const result = await response.json();
            if (response.ok) {
              console.log("Sighting saved:", result);
              button.innerHTML = "Submitted!";
              displaySubmissionAlert();
              setTimeout(() => {
                document.getElementById("submitIdentificationContainer").classList.add("hidden");
                button.disabled = false;
                button.innerHTML = "Submit";
                // Close the submission modal after submitting
                document.getElementById("submissionModal").close();
              }, 1000);
            } else {
              console.error("Submission error:", result);
              alert(result.error || "Submission failed.");
              button.disabled = false;
              button.innerHTML = "Submit";
            }
          } catch (err) {
            console.error("Request failed:", err);
            alert("Could not submit sighting.");
            button.disabled = false;
            button.innerHTML = "Submit";
          }
        }

        // Submission functionality

        let mapInitialized = false;
        let map;
        let coordinateInputTimeout;

        const yesButton = document.getElementById("yesButton");
        let submissionModal = document.getElementById("submissionModal");
        yesButton.addEventListener("click", () => {
          // only load the map when the submission modal is opened
          submissionModal.showModal();
          // Give some time for modal to open
          setTimeout(() => {
            if (!mapInitialized) {
              initializeMap();
              mapInitialized = true;
            } else {
            }
          }, 300);
        });

        function initializeMap() {
          map = L.map('map', {
            minZoom: 1,
            maxZoom: 18
          }).fitWorld();
          map.setZoom(1); // Zoom in the map a little

          // Set the map bounds
          const south_west = L.latLng(-90, -200)
          const north_east = L.latLng(90, 200)
          const bounds = L.latLngBounds(south_west, north_east)

          // Prevent users from being able to pan outside of the map's bounds
          /* credit to rob.m's stackflow answer to prevent user from being able to pan out of map bounds
          https://stackoverflow.com/questions/22155017/can-i-prevent-panning-leaflet-map-out-of-the-worlds-edge*/
          map.setMaxBounds(bounds);
          map.on('drag', function () {
            map.panInsideBounds(bounds, { animate: false });
          })

          map.whenReady(() => {
            // Add tiles
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
              attribution: '&copy; OpenStreetMap contributors',
            }).addTo(map);
          });

          // Add a marker to the map at clicked location
          // Fill coordinate fields with coordinates at clicked point
          map.on('click', function (pointClicked) {
            const lat = pointClicked.latlng.lat.toFixed(6);
            const lng = pointClicked.latlng.lng.toFixed(6);
            document.getElementById('sightingLatitude').value = lat;
            document.getElementById('sightingLongitude').value = lng;

            addSightingMarker(lat, lng);
          });

          // Add listener to coordinate inputs to trigger map zoom/marker placement after typing
          ["sightingLatitude", "sightingLongitude"].forEach(coordinate => {
            document.getElementById(coordinate).addEventListener("input", handleCoordinateInput)
          })
        }

        // Add sighting marker to map or update it's position using coordinate info
        function addSightingMarker(latitude, longitude) {
          if (window.sightingMarker) {
            window.sightingMarker.setLatLng([latitude, longitude]);
          } else {
            window.sightingMarker = L.marker([latitude, longitude]).addTo(map);
          }
        }

        // try to get the user's current location
        window.getLocation = function () {
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(getLocationSuccess, getLocationError);
          } else {
            alert("Geolocation is not supported by this browser.");
          }
        };
        // if position retrieval is successful, fill sighting location coordinates
        async function getLocationSuccess(position) {
          const lat = position.coords.latitude;
          const lng = position.coords.longitude;
          document.getElementById('sightingLatitude').value = lat;
          document.getElementById('sightingLongitude').value = lng;

          // Add marker based on your coordinate position
          addSightingMarker(lat, lng);
          // pan to input lat and long
          map.setView(
            [lat, lng],
            16
          );
        }

        // add lat long marker to map based on input value and pan to it
        function handleCoordinateInput() {
          let latitude = document.getElementById("sightingLatitude").value;
          let longitude = document.getElementById("sightingLongitude").value;
          if (latitude != "" && longitude != "") {
            clearTimeout();
            coordinateInputTimeout = setTimeout(() => {
              // add sighting marker to submission map and zoom to it
              addSightingMarker(latitude, longitude);
              map.setView(
                [latitude, longitude],
                16
              );
            })
          }
        }

        function getLocationError(err) {
          alert("Could not access current location.");
          console.warn(`ERROR(${err.code}): ${err.message}`);
        }

        // Populate coordinates using current location on element click
        const useCurrentLocation = document.getElementById("useCurrentLocation");
        useCurrentLocation.addEventListener("click", () => {
          getLocation();
        });

        // Initialize
        document.addEventListener("DOMContentLoaded", () => {
          // Nothing specific to initialize for this page
        });
      </script>
      <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
</body>

</html>